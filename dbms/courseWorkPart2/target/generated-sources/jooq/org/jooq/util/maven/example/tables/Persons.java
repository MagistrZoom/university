/**
 * This class is generated by jOOQ
 */
package org.jooq.util.maven.example.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.util.maven.example.Keys;
import org.jooq.util.maven.example.Public;
import org.jooq.util.maven.example.tables.records.PersonsRecord;
import org.jooq.util.maven.example.udt.records.PassportRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Persons extends TableImpl<PersonsRecord> {

    private static final long serialVersionUID = 978855691;

    /**
     * The reference instance of <code>public.persons</code>
     */
    public static final Persons PERSONS = new Persons();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonsRecord> getRecordType() {
        return PersonsRecord.class;
    }

    /**
     * The column <code>public.persons.person_id</code>.
     */
    public final TableField<PersonsRecord, Integer> PERSON_ID = createField("person_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('persons_person_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.persons.last_name</code>.
     */
    public final TableField<PersonsRecord, String> LAST_NAME = createField("last_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.persons.first_name</code>.
     */
    public final TableField<PersonsRecord, String> FIRST_NAME = createField("first_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.persons.second_name</code>.
     */
    public final TableField<PersonsRecord, String> SECOND_NAME = createField("second_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.persons.date_of_birth</code>.
     */
    public final TableField<PersonsRecord, Date> DATE_OF_BIRTH = createField("date_of_birth", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>public.persons.sex</code>.
     */
    public final TableField<PersonsRecord, String> SEX = createField("sex", org.jooq.impl.SQLDataType.CHAR.length(1).nullable(false).defaultValue(org.jooq.impl.DSL.field("NULL::bpchar", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>public.persons.place_of_birth</code>.
     */
    public final TableField<PersonsRecord, String> PLACE_OF_BIRTH = createField("place_of_birth", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.persons.address</code>.
     */
    public final TableField<PersonsRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.persons.phone</code>.
     */
    public final TableField<PersonsRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.persons.photo</code>.
     */
    public final TableField<PersonsRecord, byte[]> PHOTO = createField("photo", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.persons.passport</code>.
     */
    public final TableField<PersonsRecord, PassportRecord> PASSPORT = createField("passport", org.jooq.util.maven.example.udt.Passport.PASSPORT.getDataType(), this, "");

    /**
     * The column <code>public.persons.position_id</code>.
     */
    public final TableField<PersonsRecord, Integer> POSITION_ID = createField("position_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.persons</code> table reference
     */
    public Persons() {
        this("persons", null);
    }

    /**
     * Create an aliased <code>public.persons</code> table reference
     */
    public Persons(String alias) {
        this(alias, PERSONS);
    }

    private Persons(String alias, Table<PersonsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Persons(String alias, Table<PersonsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PersonsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PERSONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PersonsRecord> getPrimaryKey() {
        return Keys.PERSONS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PersonsRecord>> getKeys() {
        return Arrays.<UniqueKey<PersonsRecord>>asList(Keys.PERSONS_PKEY, Keys.PASSPORT_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PersonsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PersonsRecord, ?>>asList(Keys.PERSONS__FK_POSITION_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Persons as(String alias) {
        return new Persons(alias, this);
    }

    /**
     * Rename this table
     */
    public Persons rename(String name) {
        return new Persons(name, null);
    }
}
